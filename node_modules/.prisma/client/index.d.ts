
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Profile
 * 
 */
export type Profile = {
  id: number
  createdAt: Date
  goals: string
  ownerId: number
  activeTrainingProgramId: number | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  createdAt: Date
  username: string
  email: string
  provider_id: string
  hashed_password: string | null
}

/**
 * Model TrainingProgramDay
 * 
 */
export type TrainingProgramDay = {
  id: number
  createdAt: Date
  assignedBy: number
  dayOfTheWeek: number
  description: string
  trainingProgramId: number
}

/**
 * Model TrainingProgram
 * 
 */
export type TrainingProgram = {
  id: number
  createdAt: Date
  name: string
  ownerId: number
}

/**
 * Model ExerciseEvent
 * 
 */
export type ExerciseEvent = {
  id: number
  createdAt: Date
  date: Date | null
  name: string
  weight: number
  difficulty: number | null
  notes: string
  ownerId: number
  trainingProgramDayId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.trainingProgramDay`: Exposes CRUD operations for the **TrainingProgramDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingProgramDays
    * const trainingProgramDays = await prisma.trainingProgramDay.findMany()
    * ```
    */
  get trainingProgramDay(): Prisma.TrainingProgramDayDelegate<GlobalReject>;

  /**
   * `prisma.trainingProgram`: Exposes CRUD operations for the **TrainingProgram** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrainingPrograms
    * const trainingPrograms = await prisma.trainingProgram.findMany()
    * ```
    */
  get trainingProgram(): Prisma.TrainingProgramDelegate<GlobalReject>;

  /**
   * `prisma.exerciseEvent`: Exposes CRUD operations for the **ExerciseEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExerciseEvents
    * const exerciseEvents = await prisma.exerciseEvent.findMany()
    * ```
    */
  get exerciseEvent(): Prisma.ExerciseEventDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Profile: 'Profile',
    User: 'User',
    TrainingProgramDay: 'TrainingProgramDay',
    TrainingProgram: 'TrainingProgram',
    ExerciseEvent: 'ExerciseEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    TrainingProgram: number
    ExerciseEvent: number
  }

  export type UserCountOutputTypeSelect = {
    TrainingProgram?: boolean
    ExerciseEvent?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type TrainingProgramDayCountOutputType
   */


  export type TrainingProgramDayCountOutputType = {
    exercises: number
  }

  export type TrainingProgramDayCountOutputTypeSelect = {
    exercises?: boolean
  }

  export type TrainingProgramDayCountOutputTypeGetPayload<S extends boolean | null | undefined | TrainingProgramDayCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TrainingProgramDayCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TrainingProgramDayCountOutputTypeArgs)
    ? TrainingProgramDayCountOutputType 
    : S extends { select: any } & (TrainingProgramDayCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TrainingProgramDayCountOutputType ? TrainingProgramDayCountOutputType[P] : never
  } 
      : TrainingProgramDayCountOutputType




  // Custom InputTypes

  /**
   * TrainingProgramDayCountOutputType without action
   */
  export type TrainingProgramDayCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDayCountOutputType
     */
    select?: TrainingProgramDayCountOutputTypeSelect | null
  }



  /**
   * Count Type TrainingProgramCountOutputType
   */


  export type TrainingProgramCountOutputType = {
    days: number
    Profile: number
  }

  export type TrainingProgramCountOutputTypeSelect = {
    days?: boolean
    Profile?: boolean
  }

  export type TrainingProgramCountOutputTypeGetPayload<S extends boolean | null | undefined | TrainingProgramCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TrainingProgramCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TrainingProgramCountOutputTypeArgs)
    ? TrainingProgramCountOutputType 
    : S extends { select: any } & (TrainingProgramCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TrainingProgramCountOutputType ? TrainingProgramCountOutputType[P] : never
  } 
      : TrainingProgramCountOutputType




  // Custom InputTypes

  /**
   * TrainingProgramCountOutputType without action
   */
  export type TrainingProgramCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramCountOutputType
     */
    select?: TrainingProgramCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
    activeTrainingProgramId: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
    activeTrainingProgramId: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    goals: string | null
    ownerId: number | null
    activeTrainingProgramId: number | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    goals: string | null
    ownerId: number | null
    activeTrainingProgramId: number | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    createdAt: number
    goals: number
    ownerId: number
    activeTrainingProgramId: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    ownerId?: true
    activeTrainingProgramId?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    ownerId?: true
    activeTrainingProgramId?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    createdAt?: true
    goals?: true
    ownerId?: true
    activeTrainingProgramId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    goals?: true
    ownerId?: true
    activeTrainingProgramId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    createdAt?: true
    goals?: true
    ownerId?: true
    activeTrainingProgramId?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: ProfileScalarFieldEnum[]
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: number
    createdAt: Date
    goals: string
    ownerId: number
    activeTrainingProgramId: number | null
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    createdAt?: boolean
    goals?: boolean
    ownerId?: boolean
    owner?: boolean | UserArgs
    activeTrainingProgramId?: boolean
    activeTrainingProgram?: boolean | TrainingProgramArgs
  }


  export type ProfileInclude = {
    owner?: boolean | UserArgs
    activeTrainingProgram?: boolean | TrainingProgramArgs
  }

  export type ProfileGetPayload<S extends boolean | null | undefined | ProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Profile :
    S extends undefined ? never :
    S extends { include: any } & (ProfileArgs | ProfileFindManyArgs)
    ? Profile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'activeTrainingProgram' ? TrainingProgramGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ProfileArgs | ProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'activeTrainingProgram' ? TrainingProgramGetPayload<S['select'][P]> | null :  P extends keyof Profile ? Profile[P] : never
  } 
      : Profile


  type ProfileCountArgs = 
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    activeTrainingProgram<T extends TrainingProgramArgs= {}>(args?: Subset<T, TrainingProgramArgs>): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    username: string | null
    email: string | null
    provider_id: string | null
    hashed_password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    username: string | null
    email: string | null
    provider_id: string | null
    hashed_password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    username: number
    email: number
    provider_id: number
    hashed_password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    username?: true
    email?: true
    provider_id?: true
    hashed_password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    username?: true
    email?: true
    provider_id?: true
    hashed_password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    username?: true
    email?: true
    provider_id?: true
    hashed_password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    username: string
    email: string
    provider_id: string
    hashed_password: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    username?: boolean
    email?: boolean
    provider_id?: boolean
    hashed_password?: boolean
    Profile?: boolean | ProfileArgs
    TrainingProgram?: boolean | User$TrainingProgramArgs
    ExerciseEvent?: boolean | User$ExerciseEventArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Profile?: boolean | ProfileArgs
    TrainingProgram?: boolean | User$TrainingProgramArgs
    ExerciseEvent?: boolean | User$ExerciseEventArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'TrainingProgram' ? Array < TrainingProgramGetPayload<S['include'][P]>>  :
        P extends 'ExerciseEvent' ? Array < ExerciseEventGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'TrainingProgram' ? Array < TrainingProgramGetPayload<S['select'][P]>>  :
        P extends 'ExerciseEvent' ? Array < ExerciseEventGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Profile<T extends ProfileArgs= {}>(args?: Subset<T, ProfileArgs>): Prisma__ProfileClient<ProfileGetPayload<T> | Null>;

    TrainingProgram<T extends User$TrainingProgramArgs= {}>(args?: Subset<T, User$TrainingProgramArgs>): Prisma.PrismaPromise<Array<TrainingProgramGetPayload<T>>| Null>;

    ExerciseEvent<T extends User$ExerciseEventArgs= {}>(args?: Subset<T, User$ExerciseEventArgs>): Prisma.PrismaPromise<Array<ExerciseEventGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.TrainingProgram
   */
  export type User$TrainingProgramArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    where?: TrainingProgramWhereInput
    orderBy?: Enumerable<TrainingProgramOrderByWithRelationInput>
    cursor?: TrainingProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TrainingProgramScalarFieldEnum>
  }


  /**
   * User.ExerciseEvent
   */
  export type User$ExerciseEventArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    where?: ExerciseEventWhereInput
    orderBy?: Enumerable<ExerciseEventOrderByWithRelationInput>
    cursor?: ExerciseEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExerciseEventScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model TrainingProgramDay
   */


  export type AggregateTrainingProgramDay = {
    _count: TrainingProgramDayCountAggregateOutputType | null
    _avg: TrainingProgramDayAvgAggregateOutputType | null
    _sum: TrainingProgramDaySumAggregateOutputType | null
    _min: TrainingProgramDayMinAggregateOutputType | null
    _max: TrainingProgramDayMaxAggregateOutputType | null
  }

  export type TrainingProgramDayAvgAggregateOutputType = {
    id: number | null
    assignedBy: number | null
    dayOfTheWeek: number | null
    trainingProgramId: number | null
  }

  export type TrainingProgramDaySumAggregateOutputType = {
    id: number | null
    assignedBy: number | null
    dayOfTheWeek: number | null
    trainingProgramId: number | null
  }

  export type TrainingProgramDayMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    assignedBy: number | null
    dayOfTheWeek: number | null
    description: string | null
    trainingProgramId: number | null
  }

  export type TrainingProgramDayMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    assignedBy: number | null
    dayOfTheWeek: number | null
    description: string | null
    trainingProgramId: number | null
  }

  export type TrainingProgramDayCountAggregateOutputType = {
    id: number
    createdAt: number
    assignedBy: number
    dayOfTheWeek: number
    description: number
    trainingProgramId: number
    _all: number
  }


  export type TrainingProgramDayAvgAggregateInputType = {
    id?: true
    assignedBy?: true
    dayOfTheWeek?: true
    trainingProgramId?: true
  }

  export type TrainingProgramDaySumAggregateInputType = {
    id?: true
    assignedBy?: true
    dayOfTheWeek?: true
    trainingProgramId?: true
  }

  export type TrainingProgramDayMinAggregateInputType = {
    id?: true
    createdAt?: true
    assignedBy?: true
    dayOfTheWeek?: true
    description?: true
    trainingProgramId?: true
  }

  export type TrainingProgramDayMaxAggregateInputType = {
    id?: true
    createdAt?: true
    assignedBy?: true
    dayOfTheWeek?: true
    description?: true
    trainingProgramId?: true
  }

  export type TrainingProgramDayCountAggregateInputType = {
    id?: true
    createdAt?: true
    assignedBy?: true
    dayOfTheWeek?: true
    description?: true
    trainingProgramId?: true
    _all?: true
  }

  export type TrainingProgramDayAggregateArgs = {
    /**
     * Filter which TrainingProgramDay to aggregate.
     */
    where?: TrainingProgramDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingProgramDays to fetch.
     */
    orderBy?: Enumerable<TrainingProgramDayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingProgramDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingProgramDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingProgramDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingProgramDays
    **/
    _count?: true | TrainingProgramDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingProgramDayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingProgramDaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingProgramDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingProgramDayMaxAggregateInputType
  }

  export type GetTrainingProgramDayAggregateType<T extends TrainingProgramDayAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingProgramDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingProgramDay[P]>
      : GetScalarType<T[P], AggregateTrainingProgramDay[P]>
  }




  export type TrainingProgramDayGroupByArgs = {
    where?: TrainingProgramDayWhereInput
    orderBy?: Enumerable<TrainingProgramDayOrderByWithAggregationInput>
    by: TrainingProgramDayScalarFieldEnum[]
    having?: TrainingProgramDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingProgramDayCountAggregateInputType | true
    _avg?: TrainingProgramDayAvgAggregateInputType
    _sum?: TrainingProgramDaySumAggregateInputType
    _min?: TrainingProgramDayMinAggregateInputType
    _max?: TrainingProgramDayMaxAggregateInputType
  }


  export type TrainingProgramDayGroupByOutputType = {
    id: number
    createdAt: Date
    assignedBy: number
    dayOfTheWeek: number
    description: string
    trainingProgramId: number
    _count: TrainingProgramDayCountAggregateOutputType | null
    _avg: TrainingProgramDayAvgAggregateOutputType | null
    _sum: TrainingProgramDaySumAggregateOutputType | null
    _min: TrainingProgramDayMinAggregateOutputType | null
    _max: TrainingProgramDayMaxAggregateOutputType | null
  }

  type GetTrainingProgramDayGroupByPayload<T extends TrainingProgramDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TrainingProgramDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingProgramDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingProgramDayGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingProgramDayGroupByOutputType[P]>
        }
      >
    >


  export type TrainingProgramDaySelect = {
    id?: boolean
    createdAt?: boolean
    assignedBy?: boolean
    dayOfTheWeek?: boolean
    description?: boolean
    trainingProgramId?: boolean
    trainingProgram?: boolean | TrainingProgramArgs
    exercises?: boolean | TrainingProgramDay$exercisesArgs
    _count?: boolean | TrainingProgramDayCountOutputTypeArgs
  }


  export type TrainingProgramDayInclude = {
    trainingProgram?: boolean | TrainingProgramArgs
    exercises?: boolean | TrainingProgramDay$exercisesArgs
    _count?: boolean | TrainingProgramDayCountOutputTypeArgs
  }

  export type TrainingProgramDayGetPayload<S extends boolean | null | undefined | TrainingProgramDayArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TrainingProgramDay :
    S extends undefined ? never :
    S extends { include: any } & (TrainingProgramDayArgs | TrainingProgramDayFindManyArgs)
    ? TrainingProgramDay  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'trainingProgram' ? TrainingProgramGetPayload<S['include'][P]> :
        P extends 'exercises' ? Array < ExerciseEventGetPayload<S['include'][P]>>  :
        P extends '_count' ? TrainingProgramDayCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TrainingProgramDayArgs | TrainingProgramDayFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'trainingProgram' ? TrainingProgramGetPayload<S['select'][P]> :
        P extends 'exercises' ? Array < ExerciseEventGetPayload<S['select'][P]>>  :
        P extends '_count' ? TrainingProgramDayCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TrainingProgramDay ? TrainingProgramDay[P] : never
  } 
      : TrainingProgramDay


  type TrainingProgramDayCountArgs = 
    Omit<TrainingProgramDayFindManyArgs, 'select' | 'include'> & {
      select?: TrainingProgramDayCountAggregateInputType | true
    }

  export interface TrainingProgramDayDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TrainingProgramDay that matches the filter.
     * @param {TrainingProgramDayFindUniqueArgs} args - Arguments to find a TrainingProgramDay
     * @example
     * // Get one TrainingProgramDay
     * const trainingProgramDay = await prisma.trainingProgramDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainingProgramDayFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainingProgramDayFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TrainingProgramDay'> extends True ? Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>> : Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T> | null, null>

    /**
     * Find one TrainingProgramDay that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TrainingProgramDayFindUniqueOrThrowArgs} args - Arguments to find a TrainingProgramDay
     * @example
     * // Get one TrainingProgramDay
     * const trainingProgramDay = await prisma.trainingProgramDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrainingProgramDayFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TrainingProgramDayFindUniqueOrThrowArgs>
    ): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>>

    /**
     * Find the first TrainingProgramDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayFindFirstArgs} args - Arguments to find a TrainingProgramDay
     * @example
     * // Get one TrainingProgramDay
     * const trainingProgramDay = await prisma.trainingProgramDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainingProgramDayFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainingProgramDayFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TrainingProgramDay'> extends True ? Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>> : Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T> | null, null>

    /**
     * Find the first TrainingProgramDay that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayFindFirstOrThrowArgs} args - Arguments to find a TrainingProgramDay
     * @example
     * // Get one TrainingProgramDay
     * const trainingProgramDay = await prisma.trainingProgramDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrainingProgramDayFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TrainingProgramDayFindFirstOrThrowArgs>
    ): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>>

    /**
     * Find zero or more TrainingProgramDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingProgramDays
     * const trainingProgramDays = await prisma.trainingProgramDay.findMany()
     * 
     * // Get first 10 TrainingProgramDays
     * const trainingProgramDays = await prisma.trainingProgramDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingProgramDayWithIdOnly = await prisma.trainingProgramDay.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainingProgramDayFindManyArgs>(
      args?: SelectSubset<T, TrainingProgramDayFindManyArgs>
    ): Prisma.PrismaPromise<Array<TrainingProgramDayGetPayload<T>>>

    /**
     * Create a TrainingProgramDay.
     * @param {TrainingProgramDayCreateArgs} args - Arguments to create a TrainingProgramDay.
     * @example
     * // Create one TrainingProgramDay
     * const TrainingProgramDay = await prisma.trainingProgramDay.create({
     *   data: {
     *     // ... data to create a TrainingProgramDay
     *   }
     * })
     * 
    **/
    create<T extends TrainingProgramDayCreateArgs>(
      args: SelectSubset<T, TrainingProgramDayCreateArgs>
    ): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>>

    /**
     * Delete a TrainingProgramDay.
     * @param {TrainingProgramDayDeleteArgs} args - Arguments to delete one TrainingProgramDay.
     * @example
     * // Delete one TrainingProgramDay
     * const TrainingProgramDay = await prisma.trainingProgramDay.delete({
     *   where: {
     *     // ... filter to delete one TrainingProgramDay
     *   }
     * })
     * 
    **/
    delete<T extends TrainingProgramDayDeleteArgs>(
      args: SelectSubset<T, TrainingProgramDayDeleteArgs>
    ): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>>

    /**
     * Update one TrainingProgramDay.
     * @param {TrainingProgramDayUpdateArgs} args - Arguments to update one TrainingProgramDay.
     * @example
     * // Update one TrainingProgramDay
     * const trainingProgramDay = await prisma.trainingProgramDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainingProgramDayUpdateArgs>(
      args: SelectSubset<T, TrainingProgramDayUpdateArgs>
    ): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>>

    /**
     * Delete zero or more TrainingProgramDays.
     * @param {TrainingProgramDayDeleteManyArgs} args - Arguments to filter TrainingProgramDays to delete.
     * @example
     * // Delete a few TrainingProgramDays
     * const { count } = await prisma.trainingProgramDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainingProgramDayDeleteManyArgs>(
      args?: SelectSubset<T, TrainingProgramDayDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingProgramDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingProgramDays
     * const trainingProgramDay = await prisma.trainingProgramDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainingProgramDayUpdateManyArgs>(
      args: SelectSubset<T, TrainingProgramDayUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TrainingProgramDay.
     * @param {TrainingProgramDayUpsertArgs} args - Arguments to update or create a TrainingProgramDay.
     * @example
     * // Update or create a TrainingProgramDay
     * const trainingProgramDay = await prisma.trainingProgramDay.upsert({
     *   create: {
     *     // ... data to create a TrainingProgramDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingProgramDay we want to update
     *   }
     * })
    **/
    upsert<T extends TrainingProgramDayUpsertArgs>(
      args: SelectSubset<T, TrainingProgramDayUpsertArgs>
    ): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T>>

    /**
     * Count the number of TrainingProgramDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayCountArgs} args - Arguments to filter TrainingProgramDays to count.
     * @example
     * // Count the number of TrainingProgramDays
     * const count = await prisma.trainingProgramDay.count({
     *   where: {
     *     // ... the filter for the TrainingProgramDays we want to count
     *   }
     * })
    **/
    count<T extends TrainingProgramDayCountArgs>(
      args?: Subset<T, TrainingProgramDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingProgramDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingProgramDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingProgramDayAggregateArgs>(args: Subset<T, TrainingProgramDayAggregateArgs>): Prisma.PrismaPromise<GetTrainingProgramDayAggregateType<T>>

    /**
     * Group by TrainingProgramDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingProgramDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingProgramDayGroupByArgs['orderBy'] }
        : { orderBy?: TrainingProgramDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingProgramDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingProgramDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingProgramDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainingProgramDayClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    trainingProgram<T extends TrainingProgramArgs= {}>(args?: Subset<T, TrainingProgramArgs>): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T> | Null>;

    exercises<T extends TrainingProgramDay$exercisesArgs= {}>(args?: Subset<T, TrainingProgramDay$exercisesArgs>): Prisma.PrismaPromise<Array<ExerciseEventGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TrainingProgramDay base type for findUnique actions
   */
  export type TrainingProgramDayFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * Filter, which TrainingProgramDay to fetch.
     */
    where: TrainingProgramDayWhereUniqueInput
  }

  /**
   * TrainingProgramDay findUnique
   */
  export interface TrainingProgramDayFindUniqueArgs extends TrainingProgramDayFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TrainingProgramDay findUniqueOrThrow
   */
  export type TrainingProgramDayFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * Filter, which TrainingProgramDay to fetch.
     */
    where: TrainingProgramDayWhereUniqueInput
  }


  /**
   * TrainingProgramDay base type for findFirst actions
   */
  export type TrainingProgramDayFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * Filter, which TrainingProgramDay to fetch.
     */
    where?: TrainingProgramDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingProgramDays to fetch.
     */
    orderBy?: Enumerable<TrainingProgramDayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingProgramDays.
     */
    cursor?: TrainingProgramDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingProgramDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingProgramDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingProgramDays.
     */
    distinct?: Enumerable<TrainingProgramDayScalarFieldEnum>
  }

  /**
   * TrainingProgramDay findFirst
   */
  export interface TrainingProgramDayFindFirstArgs extends TrainingProgramDayFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TrainingProgramDay findFirstOrThrow
   */
  export type TrainingProgramDayFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * Filter, which TrainingProgramDay to fetch.
     */
    where?: TrainingProgramDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingProgramDays to fetch.
     */
    orderBy?: Enumerable<TrainingProgramDayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingProgramDays.
     */
    cursor?: TrainingProgramDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingProgramDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingProgramDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingProgramDays.
     */
    distinct?: Enumerable<TrainingProgramDayScalarFieldEnum>
  }


  /**
   * TrainingProgramDay findMany
   */
  export type TrainingProgramDayFindManyArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * Filter, which TrainingProgramDays to fetch.
     */
    where?: TrainingProgramDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingProgramDays to fetch.
     */
    orderBy?: Enumerable<TrainingProgramDayOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingProgramDays.
     */
    cursor?: TrainingProgramDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingProgramDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingProgramDays.
     */
    skip?: number
    distinct?: Enumerable<TrainingProgramDayScalarFieldEnum>
  }


  /**
   * TrainingProgramDay create
   */
  export type TrainingProgramDayCreateArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * The data needed to create a TrainingProgramDay.
     */
    data: XOR<TrainingProgramDayCreateInput, TrainingProgramDayUncheckedCreateInput>
  }


  /**
   * TrainingProgramDay update
   */
  export type TrainingProgramDayUpdateArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * The data needed to update a TrainingProgramDay.
     */
    data: XOR<TrainingProgramDayUpdateInput, TrainingProgramDayUncheckedUpdateInput>
    /**
     * Choose, which TrainingProgramDay to update.
     */
    where: TrainingProgramDayWhereUniqueInput
  }


  /**
   * TrainingProgramDay updateMany
   */
  export type TrainingProgramDayUpdateManyArgs = {
    /**
     * The data used to update TrainingProgramDays.
     */
    data: XOR<TrainingProgramDayUpdateManyMutationInput, TrainingProgramDayUncheckedUpdateManyInput>
    /**
     * Filter which TrainingProgramDays to update
     */
    where?: TrainingProgramDayWhereInput
  }


  /**
   * TrainingProgramDay upsert
   */
  export type TrainingProgramDayUpsertArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * The filter to search for the TrainingProgramDay to update in case it exists.
     */
    where: TrainingProgramDayWhereUniqueInput
    /**
     * In case the TrainingProgramDay found by the `where` argument doesn't exist, create a new TrainingProgramDay with this data.
     */
    create: XOR<TrainingProgramDayCreateInput, TrainingProgramDayUncheckedCreateInput>
    /**
     * In case the TrainingProgramDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingProgramDayUpdateInput, TrainingProgramDayUncheckedUpdateInput>
  }


  /**
   * TrainingProgramDay delete
   */
  export type TrainingProgramDayDeleteArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    /**
     * Filter which TrainingProgramDay to delete.
     */
    where: TrainingProgramDayWhereUniqueInput
  }


  /**
   * TrainingProgramDay deleteMany
   */
  export type TrainingProgramDayDeleteManyArgs = {
    /**
     * Filter which TrainingProgramDays to delete
     */
    where?: TrainingProgramDayWhereInput
  }


  /**
   * TrainingProgramDay.exercises
   */
  export type TrainingProgramDay$exercisesArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    where?: ExerciseEventWhereInput
    orderBy?: Enumerable<ExerciseEventOrderByWithRelationInput>
    cursor?: ExerciseEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExerciseEventScalarFieldEnum>
  }


  /**
   * TrainingProgramDay without action
   */
  export type TrainingProgramDayArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
  }



  /**
   * Model TrainingProgram
   */


  export type AggregateTrainingProgram = {
    _count: TrainingProgramCountAggregateOutputType | null
    _avg: TrainingProgramAvgAggregateOutputType | null
    _sum: TrainingProgramSumAggregateOutputType | null
    _min: TrainingProgramMinAggregateOutputType | null
    _max: TrainingProgramMaxAggregateOutputType | null
  }

  export type TrainingProgramAvgAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type TrainingProgramSumAggregateOutputType = {
    id: number | null
    ownerId: number | null
  }

  export type TrainingProgramMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    ownerId: number | null
  }

  export type TrainingProgramMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    name: string | null
    ownerId: number | null
  }

  export type TrainingProgramCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    ownerId: number
    _all: number
  }


  export type TrainingProgramAvgAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type TrainingProgramSumAggregateInputType = {
    id?: true
    ownerId?: true
  }

  export type TrainingProgramMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    ownerId?: true
  }

  export type TrainingProgramMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    ownerId?: true
  }

  export type TrainingProgramCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    ownerId?: true
    _all?: true
  }

  export type TrainingProgramAggregateArgs = {
    /**
     * Filter which TrainingProgram to aggregate.
     */
    where?: TrainingProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingPrograms to fetch.
     */
    orderBy?: Enumerable<TrainingProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrainingProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingPrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrainingPrograms
    **/
    _count?: true | TrainingProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrainingProgramAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrainingProgramSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrainingProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrainingProgramMaxAggregateInputType
  }

  export type GetTrainingProgramAggregateType<T extends TrainingProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateTrainingProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrainingProgram[P]>
      : GetScalarType<T[P], AggregateTrainingProgram[P]>
  }




  export type TrainingProgramGroupByArgs = {
    where?: TrainingProgramWhereInput
    orderBy?: Enumerable<TrainingProgramOrderByWithAggregationInput>
    by: TrainingProgramScalarFieldEnum[]
    having?: TrainingProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrainingProgramCountAggregateInputType | true
    _avg?: TrainingProgramAvgAggregateInputType
    _sum?: TrainingProgramSumAggregateInputType
    _min?: TrainingProgramMinAggregateInputType
    _max?: TrainingProgramMaxAggregateInputType
  }


  export type TrainingProgramGroupByOutputType = {
    id: number
    createdAt: Date
    name: string
    ownerId: number
    _count: TrainingProgramCountAggregateOutputType | null
    _avg: TrainingProgramAvgAggregateOutputType | null
    _sum: TrainingProgramSumAggregateOutputType | null
    _min: TrainingProgramMinAggregateOutputType | null
    _max: TrainingProgramMaxAggregateOutputType | null
  }

  type GetTrainingProgramGroupByPayload<T extends TrainingProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TrainingProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrainingProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrainingProgramGroupByOutputType[P]>
            : GetScalarType<T[P], TrainingProgramGroupByOutputType[P]>
        }
      >
    >


  export type TrainingProgramSelect = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    ownerId?: boolean
    owner?: boolean | UserArgs
    days?: boolean | TrainingProgram$daysArgs
    Profile?: boolean | TrainingProgram$ProfileArgs
    _count?: boolean | TrainingProgramCountOutputTypeArgs
  }


  export type TrainingProgramInclude = {
    owner?: boolean | UserArgs
    days?: boolean | TrainingProgram$daysArgs
    Profile?: boolean | TrainingProgram$ProfileArgs
    _count?: boolean | TrainingProgramCountOutputTypeArgs
  }

  export type TrainingProgramGetPayload<S extends boolean | null | undefined | TrainingProgramArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TrainingProgram :
    S extends undefined ? never :
    S extends { include: any } & (TrainingProgramArgs | TrainingProgramFindManyArgs)
    ? TrainingProgram  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'days' ? Array < TrainingProgramDayGetPayload<S['include'][P]>>  :
        P extends 'Profile' ? Array < ProfileGetPayload<S['include'][P]>>  :
        P extends '_count' ? TrainingProgramCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TrainingProgramArgs | TrainingProgramFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'days' ? Array < TrainingProgramDayGetPayload<S['select'][P]>>  :
        P extends 'Profile' ? Array < ProfileGetPayload<S['select'][P]>>  :
        P extends '_count' ? TrainingProgramCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TrainingProgram ? TrainingProgram[P] : never
  } 
      : TrainingProgram


  type TrainingProgramCountArgs = 
    Omit<TrainingProgramFindManyArgs, 'select' | 'include'> & {
      select?: TrainingProgramCountAggregateInputType | true
    }

  export interface TrainingProgramDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TrainingProgram that matches the filter.
     * @param {TrainingProgramFindUniqueArgs} args - Arguments to find a TrainingProgram
     * @example
     * // Get one TrainingProgram
     * const trainingProgram = await prisma.trainingProgram.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TrainingProgramFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TrainingProgramFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TrainingProgram'> extends True ? Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>> : Prisma__TrainingProgramClient<TrainingProgramGetPayload<T> | null, null>

    /**
     * Find one TrainingProgram that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TrainingProgramFindUniqueOrThrowArgs} args - Arguments to find a TrainingProgram
     * @example
     * // Get one TrainingProgram
     * const trainingProgram = await prisma.trainingProgram.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TrainingProgramFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TrainingProgramFindUniqueOrThrowArgs>
    ): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>>

    /**
     * Find the first TrainingProgram that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramFindFirstArgs} args - Arguments to find a TrainingProgram
     * @example
     * // Get one TrainingProgram
     * const trainingProgram = await prisma.trainingProgram.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TrainingProgramFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TrainingProgramFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TrainingProgram'> extends True ? Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>> : Prisma__TrainingProgramClient<TrainingProgramGetPayload<T> | null, null>

    /**
     * Find the first TrainingProgram that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramFindFirstOrThrowArgs} args - Arguments to find a TrainingProgram
     * @example
     * // Get one TrainingProgram
     * const trainingProgram = await prisma.trainingProgram.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TrainingProgramFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TrainingProgramFindFirstOrThrowArgs>
    ): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>>

    /**
     * Find zero or more TrainingPrograms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrainingPrograms
     * const trainingPrograms = await prisma.trainingProgram.findMany()
     * 
     * // Get first 10 TrainingPrograms
     * const trainingPrograms = await prisma.trainingProgram.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trainingProgramWithIdOnly = await prisma.trainingProgram.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TrainingProgramFindManyArgs>(
      args?: SelectSubset<T, TrainingProgramFindManyArgs>
    ): Prisma.PrismaPromise<Array<TrainingProgramGetPayload<T>>>

    /**
     * Create a TrainingProgram.
     * @param {TrainingProgramCreateArgs} args - Arguments to create a TrainingProgram.
     * @example
     * // Create one TrainingProgram
     * const TrainingProgram = await prisma.trainingProgram.create({
     *   data: {
     *     // ... data to create a TrainingProgram
     *   }
     * })
     * 
    **/
    create<T extends TrainingProgramCreateArgs>(
      args: SelectSubset<T, TrainingProgramCreateArgs>
    ): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>>

    /**
     * Delete a TrainingProgram.
     * @param {TrainingProgramDeleteArgs} args - Arguments to delete one TrainingProgram.
     * @example
     * // Delete one TrainingProgram
     * const TrainingProgram = await prisma.trainingProgram.delete({
     *   where: {
     *     // ... filter to delete one TrainingProgram
     *   }
     * })
     * 
    **/
    delete<T extends TrainingProgramDeleteArgs>(
      args: SelectSubset<T, TrainingProgramDeleteArgs>
    ): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>>

    /**
     * Update one TrainingProgram.
     * @param {TrainingProgramUpdateArgs} args - Arguments to update one TrainingProgram.
     * @example
     * // Update one TrainingProgram
     * const trainingProgram = await prisma.trainingProgram.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TrainingProgramUpdateArgs>(
      args: SelectSubset<T, TrainingProgramUpdateArgs>
    ): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>>

    /**
     * Delete zero or more TrainingPrograms.
     * @param {TrainingProgramDeleteManyArgs} args - Arguments to filter TrainingPrograms to delete.
     * @example
     * // Delete a few TrainingPrograms
     * const { count } = await prisma.trainingProgram.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TrainingProgramDeleteManyArgs>(
      args?: SelectSubset<T, TrainingProgramDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrainingPrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrainingPrograms
     * const trainingProgram = await prisma.trainingProgram.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TrainingProgramUpdateManyArgs>(
      args: SelectSubset<T, TrainingProgramUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TrainingProgram.
     * @param {TrainingProgramUpsertArgs} args - Arguments to update or create a TrainingProgram.
     * @example
     * // Update or create a TrainingProgram
     * const trainingProgram = await prisma.trainingProgram.upsert({
     *   create: {
     *     // ... data to create a TrainingProgram
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrainingProgram we want to update
     *   }
     * })
    **/
    upsert<T extends TrainingProgramUpsertArgs>(
      args: SelectSubset<T, TrainingProgramUpsertArgs>
    ): Prisma__TrainingProgramClient<TrainingProgramGetPayload<T>>

    /**
     * Count the number of TrainingPrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramCountArgs} args - Arguments to filter TrainingPrograms to count.
     * @example
     * // Count the number of TrainingPrograms
     * const count = await prisma.trainingProgram.count({
     *   where: {
     *     // ... the filter for the TrainingPrograms we want to count
     *   }
     * })
    **/
    count<T extends TrainingProgramCountArgs>(
      args?: Subset<T, TrainingProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrainingProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrainingProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrainingProgramAggregateArgs>(args: Subset<T, TrainingProgramAggregateArgs>): Prisma.PrismaPromise<GetTrainingProgramAggregateType<T>>

    /**
     * Group by TrainingProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrainingProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrainingProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrainingProgramGroupByArgs['orderBy'] }
        : { orderBy?: TrainingProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrainingProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TrainingProgram.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TrainingProgramClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    days<T extends TrainingProgram$daysArgs= {}>(args?: Subset<T, TrainingProgram$daysArgs>): Prisma.PrismaPromise<Array<TrainingProgramDayGetPayload<T>>| Null>;

    Profile<T extends TrainingProgram$ProfileArgs= {}>(args?: Subset<T, TrainingProgram$ProfileArgs>): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TrainingProgram base type for findUnique actions
   */
  export type TrainingProgramFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * Filter, which TrainingProgram to fetch.
     */
    where: TrainingProgramWhereUniqueInput
  }

  /**
   * TrainingProgram findUnique
   */
  export interface TrainingProgramFindUniqueArgs extends TrainingProgramFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TrainingProgram findUniqueOrThrow
   */
  export type TrainingProgramFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * Filter, which TrainingProgram to fetch.
     */
    where: TrainingProgramWhereUniqueInput
  }


  /**
   * TrainingProgram base type for findFirst actions
   */
  export type TrainingProgramFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * Filter, which TrainingProgram to fetch.
     */
    where?: TrainingProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingPrograms to fetch.
     */
    orderBy?: Enumerable<TrainingProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingPrograms.
     */
    cursor?: TrainingProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingPrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingPrograms.
     */
    distinct?: Enumerable<TrainingProgramScalarFieldEnum>
  }

  /**
   * TrainingProgram findFirst
   */
  export interface TrainingProgramFindFirstArgs extends TrainingProgramFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TrainingProgram findFirstOrThrow
   */
  export type TrainingProgramFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * Filter, which TrainingProgram to fetch.
     */
    where?: TrainingProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingPrograms to fetch.
     */
    orderBy?: Enumerable<TrainingProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrainingPrograms.
     */
    cursor?: TrainingProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingPrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrainingPrograms.
     */
    distinct?: Enumerable<TrainingProgramScalarFieldEnum>
  }


  /**
   * TrainingProgram findMany
   */
  export type TrainingProgramFindManyArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * Filter, which TrainingPrograms to fetch.
     */
    where?: TrainingProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrainingPrograms to fetch.
     */
    orderBy?: Enumerable<TrainingProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrainingPrograms.
     */
    cursor?: TrainingProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrainingPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrainingPrograms.
     */
    skip?: number
    distinct?: Enumerable<TrainingProgramScalarFieldEnum>
  }


  /**
   * TrainingProgram create
   */
  export type TrainingProgramCreateArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * The data needed to create a TrainingProgram.
     */
    data: XOR<TrainingProgramCreateInput, TrainingProgramUncheckedCreateInput>
  }


  /**
   * TrainingProgram update
   */
  export type TrainingProgramUpdateArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * The data needed to update a TrainingProgram.
     */
    data: XOR<TrainingProgramUpdateInput, TrainingProgramUncheckedUpdateInput>
    /**
     * Choose, which TrainingProgram to update.
     */
    where: TrainingProgramWhereUniqueInput
  }


  /**
   * TrainingProgram updateMany
   */
  export type TrainingProgramUpdateManyArgs = {
    /**
     * The data used to update TrainingPrograms.
     */
    data: XOR<TrainingProgramUpdateManyMutationInput, TrainingProgramUncheckedUpdateManyInput>
    /**
     * Filter which TrainingPrograms to update
     */
    where?: TrainingProgramWhereInput
  }


  /**
   * TrainingProgram upsert
   */
  export type TrainingProgramUpsertArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * The filter to search for the TrainingProgram to update in case it exists.
     */
    where: TrainingProgramWhereUniqueInput
    /**
     * In case the TrainingProgram found by the `where` argument doesn't exist, create a new TrainingProgram with this data.
     */
    create: XOR<TrainingProgramCreateInput, TrainingProgramUncheckedCreateInput>
    /**
     * In case the TrainingProgram was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrainingProgramUpdateInput, TrainingProgramUncheckedUpdateInput>
  }


  /**
   * TrainingProgram delete
   */
  export type TrainingProgramDeleteArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
    /**
     * Filter which TrainingProgram to delete.
     */
    where: TrainingProgramWhereUniqueInput
  }


  /**
   * TrainingProgram deleteMany
   */
  export type TrainingProgramDeleteManyArgs = {
    /**
     * Filter which TrainingPrograms to delete
     */
    where?: TrainingProgramWhereInput
  }


  /**
   * TrainingProgram.days
   */
  export type TrainingProgram$daysArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgramDay
     */
    select?: TrainingProgramDaySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramDayInclude | null
    where?: TrainingProgramDayWhereInput
    orderBy?: Enumerable<TrainingProgramDayOrderByWithRelationInput>
    cursor?: TrainingProgramDayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TrainingProgramDayScalarFieldEnum>
  }


  /**
   * TrainingProgram.Profile
   */
  export type TrainingProgram$ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * TrainingProgram without action
   */
  export type TrainingProgramArgs = {
    /**
     * Select specific fields to fetch from the TrainingProgram
     */
    select?: TrainingProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TrainingProgramInclude | null
  }



  /**
   * Model ExerciseEvent
   */


  export type AggregateExerciseEvent = {
    _count: ExerciseEventCountAggregateOutputType | null
    _avg: ExerciseEventAvgAggregateOutputType | null
    _sum: ExerciseEventSumAggregateOutputType | null
    _min: ExerciseEventMinAggregateOutputType | null
    _max: ExerciseEventMaxAggregateOutputType | null
  }

  export type ExerciseEventAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    difficulty: number | null
    ownerId: number | null
    trainingProgramDayId: number | null
  }

  export type ExerciseEventSumAggregateOutputType = {
    id: number | null
    weight: number | null
    difficulty: number | null
    ownerId: number | null
    trainingProgramDayId: number | null
  }

  export type ExerciseEventMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    date: Date | null
    name: string | null
    weight: number | null
    difficulty: number | null
    notes: string | null
    ownerId: number | null
    trainingProgramDayId: number | null
  }

  export type ExerciseEventMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    date: Date | null
    name: string | null
    weight: number | null
    difficulty: number | null
    notes: string | null
    ownerId: number | null
    trainingProgramDayId: number | null
  }

  export type ExerciseEventCountAggregateOutputType = {
    id: number
    createdAt: number
    date: number
    name: number
    weight: number
    difficulty: number
    notes: number
    ownerId: number
    trainingProgramDayId: number
    _all: number
  }


  export type ExerciseEventAvgAggregateInputType = {
    id?: true
    weight?: true
    difficulty?: true
    ownerId?: true
    trainingProgramDayId?: true
  }

  export type ExerciseEventSumAggregateInputType = {
    id?: true
    weight?: true
    difficulty?: true
    ownerId?: true
    trainingProgramDayId?: true
  }

  export type ExerciseEventMinAggregateInputType = {
    id?: true
    createdAt?: true
    date?: true
    name?: true
    weight?: true
    difficulty?: true
    notes?: true
    ownerId?: true
    trainingProgramDayId?: true
  }

  export type ExerciseEventMaxAggregateInputType = {
    id?: true
    createdAt?: true
    date?: true
    name?: true
    weight?: true
    difficulty?: true
    notes?: true
    ownerId?: true
    trainingProgramDayId?: true
  }

  export type ExerciseEventCountAggregateInputType = {
    id?: true
    createdAt?: true
    date?: true
    name?: true
    weight?: true
    difficulty?: true
    notes?: true
    ownerId?: true
    trainingProgramDayId?: true
    _all?: true
  }

  export type ExerciseEventAggregateArgs = {
    /**
     * Filter which ExerciseEvent to aggregate.
     */
    where?: ExerciseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseEvents to fetch.
     */
    orderBy?: Enumerable<ExerciseEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExerciseEvents
    **/
    _count?: true | ExerciseEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseEventMaxAggregateInputType
  }

  export type GetExerciseEventAggregateType<T extends ExerciseEventAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseEvent[P]>
      : GetScalarType<T[P], AggregateExerciseEvent[P]>
  }




  export type ExerciseEventGroupByArgs = {
    where?: ExerciseEventWhereInput
    orderBy?: Enumerable<ExerciseEventOrderByWithAggregationInput>
    by: ExerciseEventScalarFieldEnum[]
    having?: ExerciseEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseEventCountAggregateInputType | true
    _avg?: ExerciseEventAvgAggregateInputType
    _sum?: ExerciseEventSumAggregateInputType
    _min?: ExerciseEventMinAggregateInputType
    _max?: ExerciseEventMaxAggregateInputType
  }


  export type ExerciseEventGroupByOutputType = {
    id: number
    createdAt: Date
    date: Date | null
    name: string
    weight: number
    difficulty: number | null
    notes: string
    ownerId: number
    trainingProgramDayId: number | null
    _count: ExerciseEventCountAggregateOutputType | null
    _avg: ExerciseEventAvgAggregateOutputType | null
    _sum: ExerciseEventSumAggregateOutputType | null
    _min: ExerciseEventMinAggregateOutputType | null
    _max: ExerciseEventMaxAggregateOutputType | null
  }

  type GetExerciseEventGroupByPayload<T extends ExerciseEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExerciseEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseEventGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseEventGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseEventSelect = {
    id?: boolean
    createdAt?: boolean
    date?: boolean
    name?: boolean
    weight?: boolean
    difficulty?: boolean
    notes?: boolean
    ownerId?: boolean
    owner?: boolean | UserArgs
    trainingProgramDay?: boolean | TrainingProgramDayArgs
    trainingProgramDayId?: boolean
  }


  export type ExerciseEventInclude = {
    owner?: boolean | UserArgs
    trainingProgramDay?: boolean | TrainingProgramDayArgs
  }

  export type ExerciseEventGetPayload<S extends boolean | null | undefined | ExerciseEventArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ExerciseEvent :
    S extends undefined ? never :
    S extends { include: any } & (ExerciseEventArgs | ExerciseEventFindManyArgs)
    ? ExerciseEvent  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<S['include'][P]> :
        P extends 'trainingProgramDay' ? TrainingProgramDayGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ExerciseEventArgs | ExerciseEventFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<S['select'][P]> :
        P extends 'trainingProgramDay' ? TrainingProgramDayGetPayload<S['select'][P]> | null :  P extends keyof ExerciseEvent ? ExerciseEvent[P] : never
  } 
      : ExerciseEvent


  type ExerciseEventCountArgs = 
    Omit<ExerciseEventFindManyArgs, 'select' | 'include'> & {
      select?: ExerciseEventCountAggregateInputType | true
    }

  export interface ExerciseEventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ExerciseEvent that matches the filter.
     * @param {ExerciseEventFindUniqueArgs} args - Arguments to find a ExerciseEvent
     * @example
     * // Get one ExerciseEvent
     * const exerciseEvent = await prisma.exerciseEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseEventFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExerciseEventFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ExerciseEvent'> extends True ? Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>> : Prisma__ExerciseEventClient<ExerciseEventGetPayload<T> | null, null>

    /**
     * Find one ExerciseEvent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseEventFindUniqueOrThrowArgs} args - Arguments to find a ExerciseEvent
     * @example
     * // Get one ExerciseEvent
     * const exerciseEvent = await prisma.exerciseEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseEventFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ExerciseEventFindUniqueOrThrowArgs>
    ): Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>>

    /**
     * Find the first ExerciseEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventFindFirstArgs} args - Arguments to find a ExerciseEvent
     * @example
     * // Get one ExerciseEvent
     * const exerciseEvent = await prisma.exerciseEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseEventFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExerciseEventFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ExerciseEvent'> extends True ? Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>> : Prisma__ExerciseEventClient<ExerciseEventGetPayload<T> | null, null>

    /**
     * Find the first ExerciseEvent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventFindFirstOrThrowArgs} args - Arguments to find a ExerciseEvent
     * @example
     * // Get one ExerciseEvent
     * const exerciseEvent = await prisma.exerciseEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseEventFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ExerciseEventFindFirstOrThrowArgs>
    ): Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>>

    /**
     * Find zero or more ExerciseEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExerciseEvents
     * const exerciseEvents = await prisma.exerciseEvent.findMany()
     * 
     * // Get first 10 ExerciseEvents
     * const exerciseEvents = await prisma.exerciseEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseEventWithIdOnly = await prisma.exerciseEvent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseEventFindManyArgs>(
      args?: SelectSubset<T, ExerciseEventFindManyArgs>
    ): Prisma.PrismaPromise<Array<ExerciseEventGetPayload<T>>>

    /**
     * Create a ExerciseEvent.
     * @param {ExerciseEventCreateArgs} args - Arguments to create a ExerciseEvent.
     * @example
     * // Create one ExerciseEvent
     * const ExerciseEvent = await prisma.exerciseEvent.create({
     *   data: {
     *     // ... data to create a ExerciseEvent
     *   }
     * })
     * 
    **/
    create<T extends ExerciseEventCreateArgs>(
      args: SelectSubset<T, ExerciseEventCreateArgs>
    ): Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>>

    /**
     * Delete a ExerciseEvent.
     * @param {ExerciseEventDeleteArgs} args - Arguments to delete one ExerciseEvent.
     * @example
     * // Delete one ExerciseEvent
     * const ExerciseEvent = await prisma.exerciseEvent.delete({
     *   where: {
     *     // ... filter to delete one ExerciseEvent
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseEventDeleteArgs>(
      args: SelectSubset<T, ExerciseEventDeleteArgs>
    ): Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>>

    /**
     * Update one ExerciseEvent.
     * @param {ExerciseEventUpdateArgs} args - Arguments to update one ExerciseEvent.
     * @example
     * // Update one ExerciseEvent
     * const exerciseEvent = await prisma.exerciseEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseEventUpdateArgs>(
      args: SelectSubset<T, ExerciseEventUpdateArgs>
    ): Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>>

    /**
     * Delete zero or more ExerciseEvents.
     * @param {ExerciseEventDeleteManyArgs} args - Arguments to filter ExerciseEvents to delete.
     * @example
     * // Delete a few ExerciseEvents
     * const { count } = await prisma.exerciseEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseEventDeleteManyArgs>(
      args?: SelectSubset<T, ExerciseEventDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExerciseEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExerciseEvents
     * const exerciseEvent = await prisma.exerciseEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseEventUpdateManyArgs>(
      args: SelectSubset<T, ExerciseEventUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExerciseEvent.
     * @param {ExerciseEventUpsertArgs} args - Arguments to update or create a ExerciseEvent.
     * @example
     * // Update or create a ExerciseEvent
     * const exerciseEvent = await prisma.exerciseEvent.upsert({
     *   create: {
     *     // ... data to create a ExerciseEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExerciseEvent we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseEventUpsertArgs>(
      args: SelectSubset<T, ExerciseEventUpsertArgs>
    ): Prisma__ExerciseEventClient<ExerciseEventGetPayload<T>>

    /**
     * Count the number of ExerciseEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventCountArgs} args - Arguments to filter ExerciseEvents to count.
     * @example
     * // Count the number of ExerciseEvents
     * const count = await prisma.exerciseEvent.count({
     *   where: {
     *     // ... the filter for the ExerciseEvents we want to count
     *   }
     * })
    **/
    count<T extends ExerciseEventCountArgs>(
      args?: Subset<T, ExerciseEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExerciseEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseEventAggregateArgs>(args: Subset<T, ExerciseEventAggregateArgs>): Prisma.PrismaPromise<GetExerciseEventAggregateType<T>>

    /**
     * Group by ExerciseEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseEventGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ExerciseEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExerciseEventClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    owner<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    trainingProgramDay<T extends TrainingProgramDayArgs= {}>(args?: Subset<T, TrainingProgramDayArgs>): Prisma__TrainingProgramDayClient<TrainingProgramDayGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ExerciseEvent base type for findUnique actions
   */
  export type ExerciseEventFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * Filter, which ExerciseEvent to fetch.
     */
    where: ExerciseEventWhereUniqueInput
  }

  /**
   * ExerciseEvent findUnique
   */
  export interface ExerciseEventFindUniqueArgs extends ExerciseEventFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ExerciseEvent findUniqueOrThrow
   */
  export type ExerciseEventFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * Filter, which ExerciseEvent to fetch.
     */
    where: ExerciseEventWhereUniqueInput
  }


  /**
   * ExerciseEvent base type for findFirst actions
   */
  export type ExerciseEventFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * Filter, which ExerciseEvent to fetch.
     */
    where?: ExerciseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseEvents to fetch.
     */
    orderBy?: Enumerable<ExerciseEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseEvents.
     */
    cursor?: ExerciseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseEvents.
     */
    distinct?: Enumerable<ExerciseEventScalarFieldEnum>
  }

  /**
   * ExerciseEvent findFirst
   */
  export interface ExerciseEventFindFirstArgs extends ExerciseEventFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ExerciseEvent findFirstOrThrow
   */
  export type ExerciseEventFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * Filter, which ExerciseEvent to fetch.
     */
    where?: ExerciseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseEvents to fetch.
     */
    orderBy?: Enumerable<ExerciseEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExerciseEvents.
     */
    cursor?: ExerciseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExerciseEvents.
     */
    distinct?: Enumerable<ExerciseEventScalarFieldEnum>
  }


  /**
   * ExerciseEvent findMany
   */
  export type ExerciseEventFindManyArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * Filter, which ExerciseEvents to fetch.
     */
    where?: ExerciseEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExerciseEvents to fetch.
     */
    orderBy?: Enumerable<ExerciseEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExerciseEvents.
     */
    cursor?: ExerciseEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExerciseEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExerciseEvents.
     */
    skip?: number
    distinct?: Enumerable<ExerciseEventScalarFieldEnum>
  }


  /**
   * ExerciseEvent create
   */
  export type ExerciseEventCreateArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * The data needed to create a ExerciseEvent.
     */
    data: XOR<ExerciseEventCreateInput, ExerciseEventUncheckedCreateInput>
  }


  /**
   * ExerciseEvent update
   */
  export type ExerciseEventUpdateArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * The data needed to update a ExerciseEvent.
     */
    data: XOR<ExerciseEventUpdateInput, ExerciseEventUncheckedUpdateInput>
    /**
     * Choose, which ExerciseEvent to update.
     */
    where: ExerciseEventWhereUniqueInput
  }


  /**
   * ExerciseEvent updateMany
   */
  export type ExerciseEventUpdateManyArgs = {
    /**
     * The data used to update ExerciseEvents.
     */
    data: XOR<ExerciseEventUpdateManyMutationInput, ExerciseEventUncheckedUpdateManyInput>
    /**
     * Filter which ExerciseEvents to update
     */
    where?: ExerciseEventWhereInput
  }


  /**
   * ExerciseEvent upsert
   */
  export type ExerciseEventUpsertArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * The filter to search for the ExerciseEvent to update in case it exists.
     */
    where: ExerciseEventWhereUniqueInput
    /**
     * In case the ExerciseEvent found by the `where` argument doesn't exist, create a new ExerciseEvent with this data.
     */
    create: XOR<ExerciseEventCreateInput, ExerciseEventUncheckedCreateInput>
    /**
     * In case the ExerciseEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseEventUpdateInput, ExerciseEventUncheckedUpdateInput>
  }


  /**
   * ExerciseEvent delete
   */
  export type ExerciseEventDeleteArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
    /**
     * Filter which ExerciseEvent to delete.
     */
    where: ExerciseEventWhereUniqueInput
  }


  /**
   * ExerciseEvent deleteMany
   */
  export type ExerciseEventDeleteManyArgs = {
    /**
     * Filter which ExerciseEvents to delete
     */
    where?: ExerciseEventWhereInput
  }


  /**
   * ExerciseEvent without action
   */
  export type ExerciseEventArgs = {
    /**
     * Select specific fields to fetch from the ExerciseEvent
     */
    select?: ExerciseEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExerciseEventInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ExerciseEventScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    date: 'date',
    name: 'name',
    weight: 'weight',
    difficulty: 'difficulty',
    notes: 'notes',
    ownerId: 'ownerId',
    trainingProgramDayId: 'trainingProgramDayId'
  };

  export type ExerciseEventScalarFieldEnum = (typeof ExerciseEventScalarFieldEnum)[keyof typeof ExerciseEventScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    goals: 'goals',
    ownerId: 'ownerId',
    activeTrainingProgramId: 'activeTrainingProgramId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TrainingProgramDayScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    assignedBy: 'assignedBy',
    dayOfTheWeek: 'dayOfTheWeek',
    description: 'description',
    trainingProgramId: 'trainingProgramId'
  };

  export type TrainingProgramDayScalarFieldEnum = (typeof TrainingProgramDayScalarFieldEnum)[keyof typeof TrainingProgramDayScalarFieldEnum]


  export const TrainingProgramScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    ownerId: 'ownerId'
  };

  export type TrainingProgramScalarFieldEnum = (typeof TrainingProgramScalarFieldEnum)[keyof typeof TrainingProgramScalarFieldEnum]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    username: 'username',
    email: 'email',
    provider_id: 'provider_id',
    hashed_password: 'hashed_password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    goals?: StringFilter | string
    ownerId?: IntFilter | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    activeTrainingProgramId?: IntNullableFilter | number | null
    activeTrainingProgram?: XOR<TrainingProgramRelationFilter, TrainingProgramWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    goals?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    activeTrainingProgramId?: SortOrder
    activeTrainingProgram?: TrainingProgramOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = {
    id?: number
    ownerId?: number
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    goals?: SortOrder
    ownerId?: SortOrder
    activeTrainingProgramId?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    goals?: StringWithAggregatesFilter | string
    ownerId?: IntWithAggregatesFilter | number
    activeTrainingProgramId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    username?: StringFilter | string
    email?: StringFilter | string
    provider_id?: StringFilter | string
    hashed_password?: StringNullableFilter | string | null
    Profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    TrainingProgram?: TrainingProgramListRelationFilter
    ExerciseEvent?: ExerciseEventListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    email?: SortOrder
    provider_id?: SortOrder
    hashed_password?: SortOrder
    Profile?: ProfileOrderByWithRelationInput
    TrainingProgram?: TrainingProgramOrderByRelationAggregateInput
    ExerciseEvent?: ExerciseEventOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
    provider_id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    email?: SortOrder
    provider_id?: SortOrder
    hashed_password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    provider_id?: StringWithAggregatesFilter | string
    hashed_password?: StringNullableWithAggregatesFilter | string | null
  }

  export type TrainingProgramDayWhereInput = {
    AND?: Enumerable<TrainingProgramDayWhereInput>
    OR?: Enumerable<TrainingProgramDayWhereInput>
    NOT?: Enumerable<TrainingProgramDayWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    assignedBy?: IntFilter | number
    dayOfTheWeek?: IntFilter | number
    description?: StringFilter | string
    trainingProgramId?: IntFilter | number
    trainingProgram?: XOR<TrainingProgramRelationFilter, TrainingProgramWhereInput>
    exercises?: ExerciseEventListRelationFilter
  }

  export type TrainingProgramDayOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    description?: SortOrder
    trainingProgramId?: SortOrder
    trainingProgram?: TrainingProgramOrderByWithRelationInput
    exercises?: ExerciseEventOrderByRelationAggregateInput
  }

  export type TrainingProgramDayWhereUniqueInput = {
    id?: number
  }

  export type TrainingProgramDayOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    description?: SortOrder
    trainingProgramId?: SortOrder
    _count?: TrainingProgramDayCountOrderByAggregateInput
    _avg?: TrainingProgramDayAvgOrderByAggregateInput
    _max?: TrainingProgramDayMaxOrderByAggregateInput
    _min?: TrainingProgramDayMinOrderByAggregateInput
    _sum?: TrainingProgramDaySumOrderByAggregateInput
  }

  export type TrainingProgramDayScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainingProgramDayScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainingProgramDayScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainingProgramDayScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    assignedBy?: IntWithAggregatesFilter | number
    dayOfTheWeek?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    trainingProgramId?: IntWithAggregatesFilter | number
  }

  export type TrainingProgramWhereInput = {
    AND?: Enumerable<TrainingProgramWhereInput>
    OR?: Enumerable<TrainingProgramWhereInput>
    NOT?: Enumerable<TrainingProgramWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    ownerId?: IntFilter | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    days?: TrainingProgramDayListRelationFilter
    Profile?: ProfileListRelationFilter
  }

  export type TrainingProgramOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    days?: TrainingProgramDayOrderByRelationAggregateInput
    Profile?: ProfileOrderByRelationAggregateInput
  }

  export type TrainingProgramWhereUniqueInput = {
    id?: number
  }

  export type TrainingProgramOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    _count?: TrainingProgramCountOrderByAggregateInput
    _avg?: TrainingProgramAvgOrderByAggregateInput
    _max?: TrainingProgramMaxOrderByAggregateInput
    _min?: TrainingProgramMinOrderByAggregateInput
    _sum?: TrainingProgramSumOrderByAggregateInput
  }

  export type TrainingProgramScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TrainingProgramScalarWhereWithAggregatesInput>
    OR?: Enumerable<TrainingProgramScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TrainingProgramScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    ownerId?: IntWithAggregatesFilter | number
  }

  export type ExerciseEventWhereInput = {
    AND?: Enumerable<ExerciseEventWhereInput>
    OR?: Enumerable<ExerciseEventWhereInput>
    NOT?: Enumerable<ExerciseEventWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    date?: DateTimeNullableFilter | Date | string | null
    name?: StringFilter | string
    weight?: IntFilter | number
    difficulty?: IntNullableFilter | number | null
    notes?: StringFilter | string
    ownerId?: IntFilter | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    trainingProgramDay?: XOR<TrainingProgramDayRelationFilter, TrainingProgramDayWhereInput> | null
    trainingProgramDayId?: IntNullableFilter | number | null
  }

  export type ExerciseEventOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    date?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    trainingProgramDay?: TrainingProgramDayOrderByWithRelationInput
    trainingProgramDayId?: SortOrder
  }

  export type ExerciseEventWhereUniqueInput = {
    id?: number
  }

  export type ExerciseEventOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    date?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    trainingProgramDayId?: SortOrder
    _count?: ExerciseEventCountOrderByAggregateInput
    _avg?: ExerciseEventAvgOrderByAggregateInput
    _max?: ExerciseEventMaxOrderByAggregateInput
    _min?: ExerciseEventMinOrderByAggregateInput
    _sum?: ExerciseEventSumOrderByAggregateInput
  }

  export type ExerciseEventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExerciseEventScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExerciseEventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExerciseEventScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    name?: StringWithAggregatesFilter | string
    weight?: IntWithAggregatesFilter | number
    difficulty?: IntNullableWithAggregatesFilter | number | null
    notes?: StringWithAggregatesFilter | string
    ownerId?: IntWithAggregatesFilter | number
    trainingProgramDayId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ProfileCreateInput = {
    createdAt?: Date | string
    goals: string
    owner: UserCreateNestedOneWithoutProfileInput
    activeTrainingProgram?: TrainingProgramCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    goals: string
    ownerId: number
    activeTrainingProgramId?: number | null
  }

  export type ProfileUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutProfileNestedInput
    activeTrainingProgram?: TrainingProgramUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    activeTrainingProgramId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProfileUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    activeTrainingProgramId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    Profile?: ProfileCreateNestedOneWithoutOwnerInput
    TrainingProgram?: TrainingProgramCreateNestedManyWithoutOwnerInput
    ExerciseEvent?: ExerciseEventCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    Profile?: ProfileUncheckedCreateNestedOneWithoutOwnerInput
    TrainingProgram?: TrainingProgramUncheckedCreateNestedManyWithoutOwnerInput
    ExerciseEvent?: ExerciseEventUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUpdateOneWithoutOwnerNestedInput
    TrainingProgram?: TrainingProgramUpdateManyWithoutOwnerNestedInput
    ExerciseEvent?: ExerciseEventUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUncheckedUpdateOneWithoutOwnerNestedInput
    TrainingProgram?: TrainingProgramUncheckedUpdateManyWithoutOwnerNestedInput
    ExerciseEvent?: ExerciseEventUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrainingProgramDayCreateInput = {
    createdAt?: Date | string
    assignedBy: number
    dayOfTheWeek: number
    description: string
    trainingProgram: TrainingProgramCreateNestedOneWithoutDaysInput
    exercises?: ExerciseEventCreateNestedManyWithoutTrainingProgramDayInput
  }

  export type TrainingProgramDayUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    assignedBy: number
    dayOfTheWeek: number
    description: string
    trainingProgramId: number
    exercises?: ExerciseEventUncheckedCreateNestedManyWithoutTrainingProgramDayInput
  }

  export type TrainingProgramDayUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    trainingProgram?: TrainingProgramUpdateOneRequiredWithoutDaysNestedInput
    exercises?: ExerciseEventUpdateManyWithoutTrainingProgramDayNestedInput
  }

  export type TrainingProgramDayUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    trainingProgramId?: IntFieldUpdateOperationsInput | number
    exercises?: ExerciseEventUncheckedUpdateManyWithoutTrainingProgramDayNestedInput
  }

  export type TrainingProgramDayUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingProgramDayUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    trainingProgramId?: IntFieldUpdateOperationsInput | number
  }

  export type TrainingProgramCreateInput = {
    createdAt?: Date | string
    name: string
    owner: UserCreateNestedOneWithoutTrainingProgramInput
    days?: TrainingProgramDayCreateNestedManyWithoutTrainingProgramInput
    Profile?: ProfileCreateNestedManyWithoutActiveTrainingProgramInput
  }

  export type TrainingProgramUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    name: string
    ownerId: number
    days?: TrainingProgramDayUncheckedCreateNestedManyWithoutTrainingProgramInput
    Profile?: ProfileUncheckedCreateNestedManyWithoutActiveTrainingProgramInput
  }

  export type TrainingProgramUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTrainingProgramNestedInput
    days?: TrainingProgramDayUpdateManyWithoutTrainingProgramNestedInput
    Profile?: ProfileUpdateManyWithoutActiveTrainingProgramNestedInput
  }

  export type TrainingProgramUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    days?: TrainingProgramDayUncheckedUpdateManyWithoutTrainingProgramNestedInput
    Profile?: ProfileUncheckedUpdateManyWithoutActiveTrainingProgramNestedInput
  }

  export type TrainingProgramUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TrainingProgramUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseEventCreateInput = {
    createdAt?: Date | string
    date?: Date | string | null
    name: string
    weight?: number
    difficulty?: number | null
    notes?: string
    owner: UserCreateNestedOneWithoutExerciseEventInput
    trainingProgramDay?: TrainingProgramDayCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseEventUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    date?: Date | string | null
    name: string
    weight?: number
    difficulty?: number | null
    notes?: string
    ownerId: number
    trainingProgramDayId?: number | null
  }

  export type ExerciseEventUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutExerciseEventNestedInput
    trainingProgramDay?: TrainingProgramDayUpdateOneWithoutExercisesNestedInput
  }

  export type ExerciseEventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    trainingProgramDayId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseEventUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseEventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    trainingProgramDayId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TrainingProgramRelationFilter = {
    is?: TrainingProgramWhereInput | null
    isNot?: TrainingProgramWhereInput | null
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    goals?: SortOrder
    ownerId?: SortOrder
    activeTrainingProgramId?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    activeTrainingProgramId?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    goals?: SortOrder
    ownerId?: SortOrder
    activeTrainingProgramId?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    goals?: SortOrder
    ownerId?: SortOrder
    activeTrainingProgramId?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    activeTrainingProgramId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type TrainingProgramListRelationFilter = {
    every?: TrainingProgramWhereInput
    some?: TrainingProgramWhereInput
    none?: TrainingProgramWhereInput
  }

  export type ExerciseEventListRelationFilter = {
    every?: ExerciseEventWhereInput
    some?: ExerciseEventWhereInput
    none?: ExerciseEventWhereInput
  }

  export type TrainingProgramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExerciseEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    email?: SortOrder
    provider_id?: SortOrder
    hashed_password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    email?: SortOrder
    provider_id?: SortOrder
    hashed_password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    username?: SortOrder
    email?: SortOrder
    provider_id?: SortOrder
    hashed_password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type TrainingProgramDayCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    description?: SortOrder
    trainingProgramId?: SortOrder
  }

  export type TrainingProgramDayAvgOrderByAggregateInput = {
    id?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    trainingProgramId?: SortOrder
  }

  export type TrainingProgramDayMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    description?: SortOrder
    trainingProgramId?: SortOrder
  }

  export type TrainingProgramDayMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    description?: SortOrder
    trainingProgramId?: SortOrder
  }

  export type TrainingProgramDaySumOrderByAggregateInput = {
    id?: SortOrder
    assignedBy?: SortOrder
    dayOfTheWeek?: SortOrder
    trainingProgramId?: SortOrder
  }

  export type TrainingProgramDayListRelationFilter = {
    every?: TrainingProgramDayWhereInput
    some?: TrainingProgramDayWhereInput
    none?: TrainingProgramDayWhereInput
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type TrainingProgramDayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrainingProgramCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
  }

  export type TrainingProgramAvgOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type TrainingProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
  }

  export type TrainingProgramMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
  }

  export type TrainingProgramSumOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type TrainingProgramDayRelationFilter = {
    is?: TrainingProgramDayWhereInput | null
    isNot?: TrainingProgramDayWhereInput | null
  }

  export type ExerciseEventCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    date?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    trainingProgramDayId?: SortOrder
  }

  export type ExerciseEventAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    ownerId?: SortOrder
    trainingProgramDayId?: SortOrder
  }

  export type ExerciseEventMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    date?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    trainingProgramDayId?: SortOrder
  }

  export type ExerciseEventMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    date?: SortOrder
    name?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    notes?: SortOrder
    ownerId?: SortOrder
    trainingProgramDayId?: SortOrder
  }

  export type ExerciseEventSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    difficulty?: SortOrder
    ownerId?: SortOrder
    trainingProgramDayId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type TrainingProgramCreateNestedOneWithoutProfileInput = {
    create?: XOR<TrainingProgramCreateWithoutProfileInput, TrainingProgramUncheckedCreateWithoutProfileInput>
    connectOrCreate?: TrainingProgramCreateOrConnectWithoutProfileInput
    connect?: TrainingProgramWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type TrainingProgramUpdateOneWithoutProfileNestedInput = {
    create?: XOR<TrainingProgramCreateWithoutProfileInput, TrainingProgramUncheckedCreateWithoutProfileInput>
    connectOrCreate?: TrainingProgramCreateOrConnectWithoutProfileInput
    upsert?: TrainingProgramUpsertWithoutProfileInput
    disconnect?: boolean
    delete?: boolean
    connect?: TrainingProgramWhereUniqueInput
    update?: XOR<TrainingProgramUpdateWithoutProfileInput, TrainingProgramUncheckedUpdateWithoutProfileInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileCreateNestedOneWithoutOwnerInput = {
    create?: XOR<ProfileCreateWithoutOwnerInput, ProfileUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOwnerInput
    connect?: ProfileWhereUniqueInput
  }

  export type TrainingProgramCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<TrainingProgramCreateWithoutOwnerInput>, Enumerable<TrainingProgramUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TrainingProgramCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<TrainingProgramWhereUniqueInput>
  }

  export type ExerciseEventCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutOwnerInput>, Enumerable<ExerciseEventUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutOwnerInput = {
    create?: XOR<ProfileCreateWithoutOwnerInput, ProfileUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOwnerInput
    connect?: ProfileWhereUniqueInput
  }

  export type TrainingProgramUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<TrainingProgramCreateWithoutOwnerInput>, Enumerable<TrainingProgramUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TrainingProgramCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<TrainingProgramWhereUniqueInput>
  }

  export type ExerciseEventUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutOwnerInput>, Enumerable<ExerciseEventUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProfileUpdateOneWithoutOwnerNestedInput = {
    create?: XOR<ProfileCreateWithoutOwnerInput, ProfileUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOwnerInput
    upsert?: ProfileUpsertWithoutOwnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutOwnerInput, ProfileUncheckedUpdateWithoutOwnerInput>
  }

  export type TrainingProgramUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<TrainingProgramCreateWithoutOwnerInput>, Enumerable<TrainingProgramUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TrainingProgramCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<TrainingProgramUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<TrainingProgramWhereUniqueInput>
    disconnect?: Enumerable<TrainingProgramWhereUniqueInput>
    delete?: Enumerable<TrainingProgramWhereUniqueInput>
    connect?: Enumerable<TrainingProgramWhereUniqueInput>
    update?: Enumerable<TrainingProgramUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<TrainingProgramUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<TrainingProgramScalarWhereInput>
  }

  export type ExerciseEventUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutOwnerInput>, Enumerable<ExerciseEventUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ExerciseEventUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<ExerciseEventWhereUniqueInput>
    disconnect?: Enumerable<ExerciseEventWhereUniqueInput>
    delete?: Enumerable<ExerciseEventWhereUniqueInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
    update?: Enumerable<ExerciseEventUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ExerciseEventUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ExerciseEventScalarWhereInput>
  }

  export type ProfileUncheckedUpdateOneWithoutOwnerNestedInput = {
    create?: XOR<ProfileCreateWithoutOwnerInput, ProfileUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutOwnerInput
    upsert?: ProfileUpsertWithoutOwnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutOwnerInput, ProfileUncheckedUpdateWithoutOwnerInput>
  }

  export type TrainingProgramUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<TrainingProgramCreateWithoutOwnerInput>, Enumerable<TrainingProgramUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<TrainingProgramCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<TrainingProgramUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<TrainingProgramWhereUniqueInput>
    disconnect?: Enumerable<TrainingProgramWhereUniqueInput>
    delete?: Enumerable<TrainingProgramWhereUniqueInput>
    connect?: Enumerable<TrainingProgramWhereUniqueInput>
    update?: Enumerable<TrainingProgramUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<TrainingProgramUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<TrainingProgramScalarWhereInput>
  }

  export type ExerciseEventUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutOwnerInput>, Enumerable<ExerciseEventUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<ExerciseEventUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<ExerciseEventWhereUniqueInput>
    disconnect?: Enumerable<ExerciseEventWhereUniqueInput>
    delete?: Enumerable<ExerciseEventWhereUniqueInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
    update?: Enumerable<ExerciseEventUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<ExerciseEventUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<ExerciseEventScalarWhereInput>
  }

  export type TrainingProgramCreateNestedOneWithoutDaysInput = {
    create?: XOR<TrainingProgramCreateWithoutDaysInput, TrainingProgramUncheckedCreateWithoutDaysInput>
    connectOrCreate?: TrainingProgramCreateOrConnectWithoutDaysInput
    connect?: TrainingProgramWhereUniqueInput
  }

  export type ExerciseEventCreateNestedManyWithoutTrainingProgramDayInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutTrainingProgramDayInput>, Enumerable<ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutTrainingProgramDayInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
  }

  export type ExerciseEventUncheckedCreateNestedManyWithoutTrainingProgramDayInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutTrainingProgramDayInput>, Enumerable<ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutTrainingProgramDayInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
  }

  export type TrainingProgramUpdateOneRequiredWithoutDaysNestedInput = {
    create?: XOR<TrainingProgramCreateWithoutDaysInput, TrainingProgramUncheckedCreateWithoutDaysInput>
    connectOrCreate?: TrainingProgramCreateOrConnectWithoutDaysInput
    upsert?: TrainingProgramUpsertWithoutDaysInput
    connect?: TrainingProgramWhereUniqueInput
    update?: XOR<TrainingProgramUpdateWithoutDaysInput, TrainingProgramUncheckedUpdateWithoutDaysInput>
  }

  export type ExerciseEventUpdateManyWithoutTrainingProgramDayNestedInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutTrainingProgramDayInput>, Enumerable<ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutTrainingProgramDayInput>
    upsert?: Enumerable<ExerciseEventUpsertWithWhereUniqueWithoutTrainingProgramDayInput>
    set?: Enumerable<ExerciseEventWhereUniqueInput>
    disconnect?: Enumerable<ExerciseEventWhereUniqueInput>
    delete?: Enumerable<ExerciseEventWhereUniqueInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
    update?: Enumerable<ExerciseEventUpdateWithWhereUniqueWithoutTrainingProgramDayInput>
    updateMany?: Enumerable<ExerciseEventUpdateManyWithWhereWithoutTrainingProgramDayInput>
    deleteMany?: Enumerable<ExerciseEventScalarWhereInput>
  }

  export type ExerciseEventUncheckedUpdateManyWithoutTrainingProgramDayNestedInput = {
    create?: XOR<Enumerable<ExerciseEventCreateWithoutTrainingProgramDayInput>, Enumerable<ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput>>
    connectOrCreate?: Enumerable<ExerciseEventCreateOrConnectWithoutTrainingProgramDayInput>
    upsert?: Enumerable<ExerciseEventUpsertWithWhereUniqueWithoutTrainingProgramDayInput>
    set?: Enumerable<ExerciseEventWhereUniqueInput>
    disconnect?: Enumerable<ExerciseEventWhereUniqueInput>
    delete?: Enumerable<ExerciseEventWhereUniqueInput>
    connect?: Enumerable<ExerciseEventWhereUniqueInput>
    update?: Enumerable<ExerciseEventUpdateWithWhereUniqueWithoutTrainingProgramDayInput>
    updateMany?: Enumerable<ExerciseEventUpdateManyWithWhereWithoutTrainingProgramDayInput>
    deleteMany?: Enumerable<ExerciseEventScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutTrainingProgramInput = {
    create?: XOR<UserCreateWithoutTrainingProgramInput, UserUncheckedCreateWithoutTrainingProgramInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainingProgramInput
    connect?: UserWhereUniqueInput
  }

  export type TrainingProgramDayCreateNestedManyWithoutTrainingProgramInput = {
    create?: XOR<Enumerable<TrainingProgramDayCreateWithoutTrainingProgramInput>, Enumerable<TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput>>
    connectOrCreate?: Enumerable<TrainingProgramDayCreateOrConnectWithoutTrainingProgramInput>
    connect?: Enumerable<TrainingProgramDayWhereUniqueInput>
  }

  export type ProfileCreateNestedManyWithoutActiveTrainingProgramInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutActiveTrainingProgramInput>, Enumerable<ProfileUncheckedCreateWithoutActiveTrainingProgramInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutActiveTrainingProgramInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type TrainingProgramDayUncheckedCreateNestedManyWithoutTrainingProgramInput = {
    create?: XOR<Enumerable<TrainingProgramDayCreateWithoutTrainingProgramInput>, Enumerable<TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput>>
    connectOrCreate?: Enumerable<TrainingProgramDayCreateOrConnectWithoutTrainingProgramInput>
    connect?: Enumerable<TrainingProgramDayWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedManyWithoutActiveTrainingProgramInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutActiveTrainingProgramInput>, Enumerable<ProfileUncheckedCreateWithoutActiveTrainingProgramInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutActiveTrainingProgramInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutTrainingProgramNestedInput = {
    create?: XOR<UserCreateWithoutTrainingProgramInput, UserUncheckedCreateWithoutTrainingProgramInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrainingProgramInput
    upsert?: UserUpsertWithoutTrainingProgramInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTrainingProgramInput, UserUncheckedUpdateWithoutTrainingProgramInput>
  }

  export type TrainingProgramDayUpdateManyWithoutTrainingProgramNestedInput = {
    create?: XOR<Enumerable<TrainingProgramDayCreateWithoutTrainingProgramInput>, Enumerable<TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput>>
    connectOrCreate?: Enumerable<TrainingProgramDayCreateOrConnectWithoutTrainingProgramInput>
    upsert?: Enumerable<TrainingProgramDayUpsertWithWhereUniqueWithoutTrainingProgramInput>
    set?: Enumerable<TrainingProgramDayWhereUniqueInput>
    disconnect?: Enumerable<TrainingProgramDayWhereUniqueInput>
    delete?: Enumerable<TrainingProgramDayWhereUniqueInput>
    connect?: Enumerable<TrainingProgramDayWhereUniqueInput>
    update?: Enumerable<TrainingProgramDayUpdateWithWhereUniqueWithoutTrainingProgramInput>
    updateMany?: Enumerable<TrainingProgramDayUpdateManyWithWhereWithoutTrainingProgramInput>
    deleteMany?: Enumerable<TrainingProgramDayScalarWhereInput>
  }

  export type ProfileUpdateManyWithoutActiveTrainingProgramNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutActiveTrainingProgramInput>, Enumerable<ProfileUncheckedCreateWithoutActiveTrainingProgramInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutActiveTrainingProgramInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutActiveTrainingProgramInput>
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutActiveTrainingProgramInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutActiveTrainingProgramInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type TrainingProgramDayUncheckedUpdateManyWithoutTrainingProgramNestedInput = {
    create?: XOR<Enumerable<TrainingProgramDayCreateWithoutTrainingProgramInput>, Enumerable<TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput>>
    connectOrCreate?: Enumerable<TrainingProgramDayCreateOrConnectWithoutTrainingProgramInput>
    upsert?: Enumerable<TrainingProgramDayUpsertWithWhereUniqueWithoutTrainingProgramInput>
    set?: Enumerable<TrainingProgramDayWhereUniqueInput>
    disconnect?: Enumerable<TrainingProgramDayWhereUniqueInput>
    delete?: Enumerable<TrainingProgramDayWhereUniqueInput>
    connect?: Enumerable<TrainingProgramDayWhereUniqueInput>
    update?: Enumerable<TrainingProgramDayUpdateWithWhereUniqueWithoutTrainingProgramInput>
    updateMany?: Enumerable<TrainingProgramDayUpdateManyWithWhereWithoutTrainingProgramInput>
    deleteMany?: Enumerable<TrainingProgramDayScalarWhereInput>
  }

  export type ProfileUncheckedUpdateManyWithoutActiveTrainingProgramNestedInput = {
    create?: XOR<Enumerable<ProfileCreateWithoutActiveTrainingProgramInput>, Enumerable<ProfileUncheckedCreateWithoutActiveTrainingProgramInput>>
    connectOrCreate?: Enumerable<ProfileCreateOrConnectWithoutActiveTrainingProgramInput>
    upsert?: Enumerable<ProfileUpsertWithWhereUniqueWithoutActiveTrainingProgramInput>
    set?: Enumerable<ProfileWhereUniqueInput>
    disconnect?: Enumerable<ProfileWhereUniqueInput>
    delete?: Enumerable<ProfileWhereUniqueInput>
    connect?: Enumerable<ProfileWhereUniqueInput>
    update?: Enumerable<ProfileUpdateWithWhereUniqueWithoutActiveTrainingProgramInput>
    updateMany?: Enumerable<ProfileUpdateManyWithWhereWithoutActiveTrainingProgramInput>
    deleteMany?: Enumerable<ProfileScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutExerciseEventInput = {
    create?: XOR<UserCreateWithoutExerciseEventInput, UserUncheckedCreateWithoutExerciseEventInput>
    connectOrCreate?: UserCreateOrConnectWithoutExerciseEventInput
    connect?: UserWhereUniqueInput
  }

  export type TrainingProgramDayCreateNestedOneWithoutExercisesInput = {
    create?: XOR<TrainingProgramDayCreateWithoutExercisesInput, TrainingProgramDayUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: TrainingProgramDayCreateOrConnectWithoutExercisesInput
    connect?: TrainingProgramDayWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutExerciseEventNestedInput = {
    create?: XOR<UserCreateWithoutExerciseEventInput, UserUncheckedCreateWithoutExerciseEventInput>
    connectOrCreate?: UserCreateOrConnectWithoutExerciseEventInput
    upsert?: UserUpsertWithoutExerciseEventInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutExerciseEventInput, UserUncheckedUpdateWithoutExerciseEventInput>
  }

  export type TrainingProgramDayUpdateOneWithoutExercisesNestedInput = {
    create?: XOR<TrainingProgramDayCreateWithoutExercisesInput, TrainingProgramDayUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: TrainingProgramDayCreateOrConnectWithoutExercisesInput
    upsert?: TrainingProgramDayUpsertWithoutExercisesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TrainingProgramDayWhereUniqueInput
    update?: XOR<TrainingProgramDayUpdateWithoutExercisesInput, TrainingProgramDayUncheckedUpdateWithoutExercisesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type UserCreateWithoutProfileInput = {
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    TrainingProgram?: TrainingProgramCreateNestedManyWithoutOwnerInput
    ExerciseEvent?: ExerciseEventCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    TrainingProgram?: TrainingProgramUncheckedCreateNestedManyWithoutOwnerInput
    ExerciseEvent?: ExerciseEventUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type TrainingProgramCreateWithoutProfileInput = {
    createdAt?: Date | string
    name: string
    owner: UserCreateNestedOneWithoutTrainingProgramInput
    days?: TrainingProgramDayCreateNestedManyWithoutTrainingProgramInput
  }

  export type TrainingProgramUncheckedCreateWithoutProfileInput = {
    id?: number
    createdAt?: Date | string
    name: string
    ownerId: number
    days?: TrainingProgramDayUncheckedCreateNestedManyWithoutTrainingProgramInput
  }

  export type TrainingProgramCreateOrConnectWithoutProfileInput = {
    where: TrainingProgramWhereUniqueInput
    create: XOR<TrainingProgramCreateWithoutProfileInput, TrainingProgramUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    TrainingProgram?: TrainingProgramUpdateManyWithoutOwnerNestedInput
    ExerciseEvent?: ExerciseEventUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    TrainingProgram?: TrainingProgramUncheckedUpdateManyWithoutOwnerNestedInput
    ExerciseEvent?: ExerciseEventUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TrainingProgramUpsertWithoutProfileInput = {
    update: XOR<TrainingProgramUpdateWithoutProfileInput, TrainingProgramUncheckedUpdateWithoutProfileInput>
    create: XOR<TrainingProgramCreateWithoutProfileInput, TrainingProgramUncheckedCreateWithoutProfileInput>
  }

  export type TrainingProgramUpdateWithoutProfileInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTrainingProgramNestedInput
    days?: TrainingProgramDayUpdateManyWithoutTrainingProgramNestedInput
  }

  export type TrainingProgramUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    days?: TrainingProgramDayUncheckedUpdateManyWithoutTrainingProgramNestedInput
  }

  export type ProfileCreateWithoutOwnerInput = {
    createdAt?: Date | string
    goals: string
    activeTrainingProgram?: TrainingProgramCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutOwnerInput = {
    id?: number
    createdAt?: Date | string
    goals: string
    activeTrainingProgramId?: number | null
  }

  export type ProfileCreateOrConnectWithoutOwnerInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutOwnerInput, ProfileUncheckedCreateWithoutOwnerInput>
  }

  export type TrainingProgramCreateWithoutOwnerInput = {
    createdAt?: Date | string
    name: string
    days?: TrainingProgramDayCreateNestedManyWithoutTrainingProgramInput
    Profile?: ProfileCreateNestedManyWithoutActiveTrainingProgramInput
  }

  export type TrainingProgramUncheckedCreateWithoutOwnerInput = {
    id?: number
    createdAt?: Date | string
    name: string
    days?: TrainingProgramDayUncheckedCreateNestedManyWithoutTrainingProgramInput
    Profile?: ProfileUncheckedCreateNestedManyWithoutActiveTrainingProgramInput
  }

  export type TrainingProgramCreateOrConnectWithoutOwnerInput = {
    where: TrainingProgramWhereUniqueInput
    create: XOR<TrainingProgramCreateWithoutOwnerInput, TrainingProgramUncheckedCreateWithoutOwnerInput>
  }

  export type ExerciseEventCreateWithoutOwnerInput = {
    createdAt?: Date | string
    date?: Date | string | null
    name: string
    weight?: number
    difficulty?: number | null
    notes?: string
    trainingProgramDay?: TrainingProgramDayCreateNestedOneWithoutExercisesInput
  }

  export type ExerciseEventUncheckedCreateWithoutOwnerInput = {
    id?: number
    createdAt?: Date | string
    date?: Date | string | null
    name: string
    weight?: number
    difficulty?: number | null
    notes?: string
    trainingProgramDayId?: number | null
  }

  export type ExerciseEventCreateOrConnectWithoutOwnerInput = {
    where: ExerciseEventWhereUniqueInput
    create: XOR<ExerciseEventCreateWithoutOwnerInput, ExerciseEventUncheckedCreateWithoutOwnerInput>
  }

  export type ProfileUpsertWithoutOwnerInput = {
    update: XOR<ProfileUpdateWithoutOwnerInput, ProfileUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProfileCreateWithoutOwnerInput, ProfileUncheckedCreateWithoutOwnerInput>
  }

  export type ProfileUpdateWithoutOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    activeTrainingProgram?: TrainingProgramUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    activeTrainingProgramId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TrainingProgramUpsertWithWhereUniqueWithoutOwnerInput = {
    where: TrainingProgramWhereUniqueInput
    update: XOR<TrainingProgramUpdateWithoutOwnerInput, TrainingProgramUncheckedUpdateWithoutOwnerInput>
    create: XOR<TrainingProgramCreateWithoutOwnerInput, TrainingProgramUncheckedCreateWithoutOwnerInput>
  }

  export type TrainingProgramUpdateWithWhereUniqueWithoutOwnerInput = {
    where: TrainingProgramWhereUniqueInput
    data: XOR<TrainingProgramUpdateWithoutOwnerInput, TrainingProgramUncheckedUpdateWithoutOwnerInput>
  }

  export type TrainingProgramUpdateManyWithWhereWithoutOwnerInput = {
    where: TrainingProgramScalarWhereInput
    data: XOR<TrainingProgramUpdateManyMutationInput, TrainingProgramUncheckedUpdateManyWithoutTrainingProgramInput>
  }

  export type TrainingProgramScalarWhereInput = {
    AND?: Enumerable<TrainingProgramScalarWhereInput>
    OR?: Enumerable<TrainingProgramScalarWhereInput>
    NOT?: Enumerable<TrainingProgramScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    ownerId?: IntFilter | number
  }

  export type ExerciseEventUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ExerciseEventWhereUniqueInput
    update: XOR<ExerciseEventUpdateWithoutOwnerInput, ExerciseEventUncheckedUpdateWithoutOwnerInput>
    create: XOR<ExerciseEventCreateWithoutOwnerInput, ExerciseEventUncheckedCreateWithoutOwnerInput>
  }

  export type ExerciseEventUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ExerciseEventWhereUniqueInput
    data: XOR<ExerciseEventUpdateWithoutOwnerInput, ExerciseEventUncheckedUpdateWithoutOwnerInput>
  }

  export type ExerciseEventUpdateManyWithWhereWithoutOwnerInput = {
    where: ExerciseEventScalarWhereInput
    data: XOR<ExerciseEventUpdateManyMutationInput, ExerciseEventUncheckedUpdateManyWithoutExerciseEventInput>
  }

  export type ExerciseEventScalarWhereInput = {
    AND?: Enumerable<ExerciseEventScalarWhereInput>
    OR?: Enumerable<ExerciseEventScalarWhereInput>
    NOT?: Enumerable<ExerciseEventScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    date?: DateTimeNullableFilter | Date | string | null
    name?: StringFilter | string
    weight?: IntFilter | number
    difficulty?: IntNullableFilter | number | null
    notes?: StringFilter | string
    ownerId?: IntFilter | number
    trainingProgramDayId?: IntNullableFilter | number | null
  }

  export type TrainingProgramCreateWithoutDaysInput = {
    createdAt?: Date | string
    name: string
    owner: UserCreateNestedOneWithoutTrainingProgramInput
    Profile?: ProfileCreateNestedManyWithoutActiveTrainingProgramInput
  }

  export type TrainingProgramUncheckedCreateWithoutDaysInput = {
    id?: number
    createdAt?: Date | string
    name: string
    ownerId: number
    Profile?: ProfileUncheckedCreateNestedManyWithoutActiveTrainingProgramInput
  }

  export type TrainingProgramCreateOrConnectWithoutDaysInput = {
    where: TrainingProgramWhereUniqueInput
    create: XOR<TrainingProgramCreateWithoutDaysInput, TrainingProgramUncheckedCreateWithoutDaysInput>
  }

  export type ExerciseEventCreateWithoutTrainingProgramDayInput = {
    createdAt?: Date | string
    date?: Date | string | null
    name: string
    weight?: number
    difficulty?: number | null
    notes?: string
    owner: UserCreateNestedOneWithoutExerciseEventInput
  }

  export type ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput = {
    id?: number
    createdAt?: Date | string
    date?: Date | string | null
    name: string
    weight?: number
    difficulty?: number | null
    notes?: string
    ownerId: number
  }

  export type ExerciseEventCreateOrConnectWithoutTrainingProgramDayInput = {
    where: ExerciseEventWhereUniqueInput
    create: XOR<ExerciseEventCreateWithoutTrainingProgramDayInput, ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput>
  }

  export type TrainingProgramUpsertWithoutDaysInput = {
    update: XOR<TrainingProgramUpdateWithoutDaysInput, TrainingProgramUncheckedUpdateWithoutDaysInput>
    create: XOR<TrainingProgramCreateWithoutDaysInput, TrainingProgramUncheckedCreateWithoutDaysInput>
  }

  export type TrainingProgramUpdateWithoutDaysInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutTrainingProgramNestedInput
    Profile?: ProfileUpdateManyWithoutActiveTrainingProgramNestedInput
  }

  export type TrainingProgramUncheckedUpdateWithoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
    Profile?: ProfileUncheckedUpdateManyWithoutActiveTrainingProgramNestedInput
  }

  export type ExerciseEventUpsertWithWhereUniqueWithoutTrainingProgramDayInput = {
    where: ExerciseEventWhereUniqueInput
    update: XOR<ExerciseEventUpdateWithoutTrainingProgramDayInput, ExerciseEventUncheckedUpdateWithoutTrainingProgramDayInput>
    create: XOR<ExerciseEventCreateWithoutTrainingProgramDayInput, ExerciseEventUncheckedCreateWithoutTrainingProgramDayInput>
  }

  export type ExerciseEventUpdateWithWhereUniqueWithoutTrainingProgramDayInput = {
    where: ExerciseEventWhereUniqueInput
    data: XOR<ExerciseEventUpdateWithoutTrainingProgramDayInput, ExerciseEventUncheckedUpdateWithoutTrainingProgramDayInput>
  }

  export type ExerciseEventUpdateManyWithWhereWithoutTrainingProgramDayInput = {
    where: ExerciseEventScalarWhereInput
    data: XOR<ExerciseEventUpdateManyMutationInput, ExerciseEventUncheckedUpdateManyWithoutExercisesInput>
  }

  export type UserCreateWithoutTrainingProgramInput = {
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    Profile?: ProfileCreateNestedOneWithoutOwnerInput
    ExerciseEvent?: ExerciseEventCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutTrainingProgramInput = {
    id?: number
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    Profile?: ProfileUncheckedCreateNestedOneWithoutOwnerInput
    ExerciseEvent?: ExerciseEventUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutTrainingProgramInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrainingProgramInput, UserUncheckedCreateWithoutTrainingProgramInput>
  }

  export type TrainingProgramDayCreateWithoutTrainingProgramInput = {
    createdAt?: Date | string
    assignedBy: number
    dayOfTheWeek: number
    description: string
    exercises?: ExerciseEventCreateNestedManyWithoutTrainingProgramDayInput
  }

  export type TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput = {
    id?: number
    createdAt?: Date | string
    assignedBy: number
    dayOfTheWeek: number
    description: string
    exercises?: ExerciseEventUncheckedCreateNestedManyWithoutTrainingProgramDayInput
  }

  export type TrainingProgramDayCreateOrConnectWithoutTrainingProgramInput = {
    where: TrainingProgramDayWhereUniqueInput
    create: XOR<TrainingProgramDayCreateWithoutTrainingProgramInput, TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput>
  }

  export type ProfileCreateWithoutActiveTrainingProgramInput = {
    createdAt?: Date | string
    goals: string
    owner: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutActiveTrainingProgramInput = {
    id?: number
    createdAt?: Date | string
    goals: string
    ownerId: number
  }

  export type ProfileCreateOrConnectWithoutActiveTrainingProgramInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutActiveTrainingProgramInput, ProfileUncheckedCreateWithoutActiveTrainingProgramInput>
  }

  export type UserUpsertWithoutTrainingProgramInput = {
    update: XOR<UserUpdateWithoutTrainingProgramInput, UserUncheckedUpdateWithoutTrainingProgramInput>
    create: XOR<UserCreateWithoutTrainingProgramInput, UserUncheckedCreateWithoutTrainingProgramInput>
  }

  export type UserUpdateWithoutTrainingProgramInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUpdateOneWithoutOwnerNestedInput
    ExerciseEvent?: ExerciseEventUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutTrainingProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUncheckedUpdateOneWithoutOwnerNestedInput
    ExerciseEvent?: ExerciseEventUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TrainingProgramDayUpsertWithWhereUniqueWithoutTrainingProgramInput = {
    where: TrainingProgramDayWhereUniqueInput
    update: XOR<TrainingProgramDayUpdateWithoutTrainingProgramInput, TrainingProgramDayUncheckedUpdateWithoutTrainingProgramInput>
    create: XOR<TrainingProgramDayCreateWithoutTrainingProgramInput, TrainingProgramDayUncheckedCreateWithoutTrainingProgramInput>
  }

  export type TrainingProgramDayUpdateWithWhereUniqueWithoutTrainingProgramInput = {
    where: TrainingProgramDayWhereUniqueInput
    data: XOR<TrainingProgramDayUpdateWithoutTrainingProgramInput, TrainingProgramDayUncheckedUpdateWithoutTrainingProgramInput>
  }

  export type TrainingProgramDayUpdateManyWithWhereWithoutTrainingProgramInput = {
    where: TrainingProgramDayScalarWhereInput
    data: XOR<TrainingProgramDayUpdateManyMutationInput, TrainingProgramDayUncheckedUpdateManyWithoutDaysInput>
  }

  export type TrainingProgramDayScalarWhereInput = {
    AND?: Enumerable<TrainingProgramDayScalarWhereInput>
    OR?: Enumerable<TrainingProgramDayScalarWhereInput>
    NOT?: Enumerable<TrainingProgramDayScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    assignedBy?: IntFilter | number
    dayOfTheWeek?: IntFilter | number
    description?: StringFilter | string
    trainingProgramId?: IntFilter | number
  }

  export type ProfileUpsertWithWhereUniqueWithoutActiveTrainingProgramInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutActiveTrainingProgramInput, ProfileUncheckedUpdateWithoutActiveTrainingProgramInput>
    create: XOR<ProfileCreateWithoutActiveTrainingProgramInput, ProfileUncheckedCreateWithoutActiveTrainingProgramInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutActiveTrainingProgramInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutActiveTrainingProgramInput, ProfileUncheckedUpdateWithoutActiveTrainingProgramInput>
  }

  export type ProfileUpdateManyWithWhereWithoutActiveTrainingProgramInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutProfileInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: Enumerable<ProfileScalarWhereInput>
    OR?: Enumerable<ProfileScalarWhereInput>
    NOT?: Enumerable<ProfileScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    goals?: StringFilter | string
    ownerId?: IntFilter | number
    activeTrainingProgramId?: IntNullableFilter | number | null
  }

  export type UserCreateWithoutExerciseEventInput = {
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    Profile?: ProfileCreateNestedOneWithoutOwnerInput
    TrainingProgram?: TrainingProgramCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutExerciseEventInput = {
    id?: number
    createdAt?: Date | string
    username: string
    email: string
    provider_id: string
    hashed_password?: string | null
    Profile?: ProfileUncheckedCreateNestedOneWithoutOwnerInput
    TrainingProgram?: TrainingProgramUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutExerciseEventInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExerciseEventInput, UserUncheckedCreateWithoutExerciseEventInput>
  }

  export type TrainingProgramDayCreateWithoutExercisesInput = {
    createdAt?: Date | string
    assignedBy: number
    dayOfTheWeek: number
    description: string
    trainingProgram: TrainingProgramCreateNestedOneWithoutDaysInput
  }

  export type TrainingProgramDayUncheckedCreateWithoutExercisesInput = {
    id?: number
    createdAt?: Date | string
    assignedBy: number
    dayOfTheWeek: number
    description: string
    trainingProgramId: number
  }

  export type TrainingProgramDayCreateOrConnectWithoutExercisesInput = {
    where: TrainingProgramDayWhereUniqueInput
    create: XOR<TrainingProgramDayCreateWithoutExercisesInput, TrainingProgramDayUncheckedCreateWithoutExercisesInput>
  }

  export type UserUpsertWithoutExerciseEventInput = {
    update: XOR<UserUpdateWithoutExerciseEventInput, UserUncheckedUpdateWithoutExerciseEventInput>
    create: XOR<UserCreateWithoutExerciseEventInput, UserUncheckedCreateWithoutExerciseEventInput>
  }

  export type UserUpdateWithoutExerciseEventInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUpdateOneWithoutOwnerNestedInput
    TrainingProgram?: TrainingProgramUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutExerciseEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    provider_id?: StringFieldUpdateOperationsInput | string
    hashed_password?: NullableStringFieldUpdateOperationsInput | string | null
    Profile?: ProfileUncheckedUpdateOneWithoutOwnerNestedInput
    TrainingProgram?: TrainingProgramUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type TrainingProgramDayUpsertWithoutExercisesInput = {
    update: XOR<TrainingProgramDayUpdateWithoutExercisesInput, TrainingProgramDayUncheckedUpdateWithoutExercisesInput>
    create: XOR<TrainingProgramDayCreateWithoutExercisesInput, TrainingProgramDayUncheckedCreateWithoutExercisesInput>
  }

  export type TrainingProgramDayUpdateWithoutExercisesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    trainingProgram?: TrainingProgramUpdateOneRequiredWithoutDaysNestedInput
  }

  export type TrainingProgramDayUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    trainingProgramId?: IntFieldUpdateOperationsInput | number
  }

  export type TrainingProgramUpdateWithoutOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    days?: TrainingProgramDayUpdateManyWithoutTrainingProgramNestedInput
    Profile?: ProfileUpdateManyWithoutActiveTrainingProgramNestedInput
  }

  export type TrainingProgramUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    days?: TrainingProgramDayUncheckedUpdateManyWithoutTrainingProgramNestedInput
    Profile?: ProfileUncheckedUpdateManyWithoutActiveTrainingProgramNestedInput
  }

  export type TrainingProgramUncheckedUpdateManyWithoutTrainingProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseEventUpdateWithoutOwnerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    trainingProgramDay?: TrainingProgramDayUpdateOneWithoutExercisesNestedInput
  }

  export type ExerciseEventUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    trainingProgramDayId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseEventUncheckedUpdateManyWithoutExerciseEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    trainingProgramDayId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ExerciseEventUpdateWithoutTrainingProgramDayInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutExerciseEventNestedInput
  }

  export type ExerciseEventUncheckedUpdateWithoutTrainingProgramDayInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type ExerciseEventUncheckedUpdateManyWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type TrainingProgramDayUpdateWithoutTrainingProgramInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseEventUpdateManyWithoutTrainingProgramDayNestedInput
  }

  export type TrainingProgramDayUncheckedUpdateWithoutTrainingProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    exercises?: ExerciseEventUncheckedUpdateManyWithoutTrainingProgramDayNestedInput
  }

  export type TrainingProgramDayUncheckedUpdateManyWithoutDaysInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: IntFieldUpdateOperationsInput | number
    dayOfTheWeek?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUpdateWithoutActiveTrainingProgramInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutActiveTrainingProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    goals?: StringFieldUpdateOperationsInput | string
    ownerId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}